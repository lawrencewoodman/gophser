package require tcltest
namespace import tcltest::*

apply {{} {
  set thisScriptDir [file dirname [info script]]
  set moduleDir [file normalize [file join $thisScriptDir ..]]
  set modules [lsort -decreasing [glob -directory $moduleDir gophser-*.tm]]
  source [lindex $modules 0]
  source [file join $thisScriptDir test_helpers.tcl]
}}


test fetch-1 {Check handles a missing selector} \
-setup {
  set cache [gophser::cache create]
} -body {
  gophser::cache fetch cache unknown
} -result {false {}}


test fetch-2 {Check handles stored selectors} \
-setup {
  set cache [gophser::cache create]
  gophser::cache store cache {/someplace} {this is the data at someplace}
  gophser::cache store cache {/someotherplace} {this is the data at someotherplace}
} -body {
  list [gophser::cache fetch cache {/someplace}] [gophser::cache fetch cache {/someotherplace}]
} -result {{true {this is the data at someplace}} {true {this is the data at someotherplace}}}


test fetch-3 {Check expires a stored selector after specified time} \
-setup {
  set cache [gophser::cache create]
  gophser::cache store cache {/someplace} {this is the data at someplace} 1
  gophser::cache store cache {/someotherplace} {this is the data at someotherplace} 10
} -body {
  set numHits 0
  set startTime [clock seconds]
  set timeout true
  while {$timeout && ([clock seconds] - $startTime < 3)} {
    lassign [gophser::cache fetch cache {/someplace}] exists value
    if {$exists && $value eq {this is the data at someplace}} {
      incr numHits
    }
    if {!$exists && $value eq {}} {
      set timeout false
    }
  }
  list $timeout [expr {$numHits > 10}] [gophser::cache fetch cache {/someotherplace}]
} -result {false 1 {true {this is the data at someotherplace}}}


cleanupTests
